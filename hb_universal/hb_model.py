"""
========
HB
========

HB py model for The System Development Kit

Initially written by Otto Simoa, otto.simola@aalto.fi, 2023.

"""

import os
import sys

if not (os.path.abspath('../../thesdk') in sys.path):
    sys.path.append(os.path.abspath('../../thesdk'))

from thesdk import thesdk

import scipy.signal as sig
import numpy as np
import pdb
import matplotlib.pyplot as plt
import scipy.linalg as lin

class hb_model(thesdk):
    def __init__(self):
        self.HB1_params = [40,[0, 0.42, 0.499, 0.5]]
        self.HB2_params = [8, [0, 0.225, 0.499, 0.5]]
        self.HB3_params = [6, [0, 0.1125, 0.499, 0.5]]

        self.resolution = 16
        self.gainBits = 5
        self.H = []

    def gen_H(self, params):
        n = params[0] 
        bands = params[1]
        desired = np.array([1, 0]) #Low-pass

        coeffs = sig.remez(n, np.array(bands), desired, fs = 1)

        hb = np.zeros((2 * n - 1, 1))
        hb[0::2, 0] = coeffs
        hb[n - 1, 0] = 1
        self.H = hb
        self.n = n

        return hb

    def generate_Hfiles(self, root, HB1, HB2, HB3):
        HB1.export_HB(root + "configs/hb1-config.yml")
        HB2.export_HB(root + "configs/hb2-config.yml")
        HB3.export_HB(root + "configs/hb3-config.yml")
        return HB1.H[:,0], HB2.H[:,0], HB3.H[:,0] 

    def export_HB(self, fpath):
        tapfile = fpath
        H = self.H

        fid = open(tapfile, 'w')

        msg = "#Generated by HB.export_HB\n"
        fid.write(msg)
        msg = "syntax_version: 2\n"
        fid.write(msg)
        msg = "resolution: " + str(self.resolution) + "\n"
        fid.write(msg)
        msg = "gainBits: "+ str(self.gainBits) + "\n"
        fid.write(msg)

        msg = "H: ["
        fid.write(msg)
        lines = H.shape[0]

        for k in range(lines - 1):
            fid.write("%0.32f,\n" %(H[k]))

        fid.write("%0.32f]\n" %(H[lines - 1]))
        fid.close()


    def interpolation(self, x):
        x = np.pad(x,((0,0),(0,int(1))),'constant',constant_values=0)
        x = np.concatenate(x)

        y = np.fft.ifft(np.fft.fft(x.reshape((-1,1))[:,0],len(x))*np.fft.fft(self.H[:,0],len(x))).reshape((-1,1))
        
        ''' Same with convolution
        out=np.convolve(x2,self.H[:,0],mode='full').reshape((-1,1))
        '''

        ''' Same with matrix calc similar to HW
        toeplitz=lin.toeplitz(x,np.zeros(len(self.H)))
        fil=toeplitz*self.H.reshape(1,-1)
        fil=np.sum(fil, axis=-1).reshape(-1,1)
        fil=fil/(max(max(fil.imag),max(fil.real)))*(2**(self.resolution-2)-1)
        '''
        return y 


if __name__=="__main__":
    import matplotlib.pyplot as plt
    from  model import *

    input()
